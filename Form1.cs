using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Xml;

namespace charging_point_digital_twin
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
            ((Control)this.SIMULINK_script_tab).Enabled = true;
            ((Control)this.OCPP_script_tab).Enabled = true;
        }

        // The "settingsdata.xml" it is a transformation table from IEC61850 into SIMULINK.
        // This file is suppose to be changed manually.
        //
        // The meaning of "RenderXMLFile" function:
        // 1. Read transformation table from IEC61850 to SIMULINK
        // 2. Upload a new "SCD" file and show it in the main Form
        private void button1_Click(object sender, EventArgs e)
        {
            XmlDocument iec61850_to_simulink_transformation_xml = new XmlDocument();
            XmlDocument scd_file_xml = new XmlDocument();
            string generated_matlab_script = String.Empty;
            string generated_cms_script = String.Empty;
            string generated_cp_script = String.Empty; 

            List<IEC61850> IEC61850_objects = new List<IEC61850>();
            List<SIMULINK> SIMULINK_objects = new List<SIMULINK>();

            treeView1.Nodes.Clear();
            using (var fbd = new OpenFileDialog())
            {
                fbd.Filter = "SCD Files (*.scd)|*.scd";
                DialogResult result = fbd.ShowDialog();
                if (result == DialogResult.OK)
                {
                    try
                    {
                        iec61850_to_simulink_transformation_xml.LoadXml(File.ReadAllText("iec61850_to_simulink_transformation_table.xml", Encoding.UTF8));
                        scd_file_xml.LoadXml(File.ReadAllText(fbd.FileName.ToString(), Encoding.UTF8));
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(ex.Message);
                    }

                    treeView1.Nodes.Add(new TreeNode(scd_file_xml.DocumentElement.Name));
                    this.build_the_treeview_structure_and_display(scd_file_xml.DocumentElement, treeView1.Nodes[0]);

                    IEC61850_objects = this.get_IEC61850_objects_from_scd(scd_file_xml.DocumentElement, IEC61850_objects);
                    SIMULINK_objects = this.get_SIMULINK_objects_from_scd(SIMULINK_objects, scd_file_xml.DocumentElement, iec61850_to_simulink_transformation_xml);
                    generated_matlab_script = generate_MATLAB_script_from_IEC61850_and_SIMULINK_object_arrays(IEC61850_objects, SIMULINK_objects, iec61850_to_simulink_transformation_xml);
                    richTextBox1.Text = generated_matlab_script;

                    generated_cms_script = generate_CENTRAL_MANAGEMENT_SYSTEM_script_from_IEC61850_objects(IEC61850_objects);
                    richTextBox2.Text = generated_cms_script;

                    generated_cp_script = generate_CHARGE_POINT_script_from_IEC61850_objects(IEC61850_objects);
                    richTextBox3.Text = generated_cp_script;
                }
            }
        }

        private string generate_MATLAB_script_from_IEC61850_and_SIMULINK_object_arrays(List<IEC61850> list_of_IEC61850_objects, List<SIMULINK> list_of_SIMULINK_objects, XmlDocument iec61850_to_simulink_transformation_xml)
        {
            string script = String.Empty;

            script = initialize_MATLAB_script();
            script += add_IEC61850_object_into_MATLAB_script(list_of_IEC61850_objects, iec61850_to_simulink_transformation_xml);
            script += add_IEC61850_object_connections_into_MATLAB_script(list_of_IEC61850_objects, list_of_SIMULINK_objects);
            script += add_solver_in_MATLAB_script();

            return script;
        }

        private string initialize_MATLAB_script()
        {
            return @"function autogenerated_matlab_script
% function which demonstrates generation of Matlab script
% Author: Nikolai Galkin (nikolai.galkin@ltu.se)

% Name of the model
fname = 'autogenerated_model';

% Check if the file already exists and delete it if it does
if exist(fname,'file') == 4
    % If it does then check whether it's open
    if bdIsLoaded(fname)
        % If it is then close it (without saving!)
        close_system(fname,0)
    end
    % delete the file
    delete([fname,'.slx']);
end

% Create the system
new_system(fname);

add_block('powerlib/powergui', [gcs,'/powergui'],...
'SampleTime', '50e-6',...
'SimulationMode', 'Discrete');" + "\n";
        }

        private string add_IEC61850_object_into_MATLAB_script(List<IEC61850> list_of_SIMULINK_objects, XmlDocument iec61850_to_simulink_transformation_xml)
        {
            string _script = String.Empty;
            int PositionY_top_left_corner = 100;
            int PositionX_top_left_corner = 240;
            int PositionY_bottom_right_corner = 130;
            int PositionX_bottom_right_corner = 270;
            short counter = 0;
            foreach (IEC61850 IEC61850_object in list_of_SIMULINK_objects)
            {
                XmlNode NodeGen = iec61850_to_simulink_transformation_xml.SelectSingleNode("configuration");
                foreach (XmlNode childNode in NodeGen.ChildNodes)
                {
                    if (IEC61850_object.Type == childNode.Attributes.GetNamedItem("name").Value)
                    {
                        if (IEC61850_object.Type == "CBR")
                        {
                            _script += "add_block('simulink/Commonly Used Blocks/Constant', [gcs,'/_" + IEC61850_object.Name + "'], 'Value', '0');\n";
                            _script += "add_block('" + childNode.Attributes.GetNamedItem("path").Value + "', [gcs,'/" + IEC61850_object.Name + "'],...\n";
                        }
                        else
                            _script += "add_block('" + childNode.Attributes.GetNamedItem("path").Value + "', [gcs,'/" + IEC61850_object.Name + "'],...\n";

                        foreach (XmlNode childNode_1 in childNode.ChildNodes)
                            _script += childNode_1.InnerText + ",...\n";

                        _script += "'Position',[" + PositionX_top_left_corner + " " + PositionY_top_left_corner + " " + PositionX_bottom_right_corner + " " + PositionY_bottom_right_corner + "]);\n";

                        if (IEC61850_object.Type == "CBR")
                            _script += "add_line(gcs, '_"+ IEC61850_object.Name + "/1', '"+ IEC61850_object.Name + "/1');\n";

                        counter++;
                        PositionX_top_left_corner += 80;
                        PositionX_bottom_right_corner += 80;
                        if (counter == 3)
                        {
                            PositionX_top_left_corner = 240;
                            PositionX_bottom_right_corner = 270;
                            PositionY_top_left_corner += 80;
                            PositionY_bottom_right_corner += 80;
                            counter = 0;
                        }
                    }
                }
            }
            return _script;
        }

        private string add_IEC61850_object_connections_into_MATLAB_script(List<IEC61850> IEC61850_objects, List<SIMULINK> SIMULINK_objects)
        {
            string _script = String.Empty;
            List<IEC61850> connection_list = new List<IEC61850>();
            SIMULINK start_obj = null;
            SIMULINK end_obj = null;
            string current_connection = string.Empty;

            foreach (IEC61850 _61850_object in IEC61850_objects)
            {
                while (_61850_object.Connection != null)
                {
                    connection_list.Add(_61850_object);
                    foreach (IEC61850 _61850_object_compare in IEC61850_objects)
                    {
                        if (_61850_object.Name != _61850_object_compare.Name)
                        {
                            if (_61850_object_compare.ConnectionFind(_61850_object.Connection))
                            {
                                connection_list.Add(_61850_object_compare);
                                _61850_object_compare.ConnectionRemove(_61850_object.Connection);
                            }
                        }
                    }
                    current_connection = _61850_object.Connection;
                    _61850_object.ConnectionRemove(_61850_object.Connection);

                    if (connection_list.Count > 1)
                    {
                        IEC61850 basic_node = connection_list.First();
                        foreach (IEC61850 _61850_object_name in connection_list)
                        {
                            if (basic_node.Name != _61850_object_name.Name)
                            {
                                start_obj = SIMULINK_objects.Find(x => x.Name.Contains(basic_node.Name));
                                end_obj = SIMULINK_objects.Find(x => x.Name.Contains(_61850_object_name.Name));

                                if (current_connection.Equals(basic_node.FirstContName) && current_connection.Equals(_61850_object_name.FirstContName)) //Left-Left connection mode
                                {
                                    if (!start_obj.Port1.Equals("null") && !end_obj.Port1.Equals("null"))
                                        _script += "add_line(gcs, '" + start_obj.Name + start_obj.Port1 + "', '" + end_obj.Name + end_obj.Port1 + "');" + "\n";
                                    if (!start_obj.Port2.Equals("null") && !end_obj.Port2.Equals("null"))
                                        _script += "add_line(gcs, '" + start_obj.Name + start_obj.Port2 + "', '" + end_obj.Name + end_obj.Port2 + "');" + "\n";
                                    if (!start_obj.Port3.Equals("null") && !end_obj.Port3.Equals("null"))
                                        _script += "add_line(gcs, '" + start_obj.Name + start_obj.Port3 + "', '" + end_obj.Name + end_obj.Port3 + "');" + "\n";
                                }
                                else if (current_connection.Equals(basic_node.FirstContName) && current_connection.Equals(_61850_object_name.SecondContName)) //Left-Right connection mode
                                {
                                    if (!start_obj.Port1.Equals("null") && !end_obj.Port4.Equals("null"))
                                        _script += "add_line(gcs, '" + start_obj.Name + start_obj.Port1 + "', '" + end_obj.Name + end_obj.Port4 + "');" + "\n";
                                    if (!start_obj.Port2.Equals("null") && !end_obj.Port5.Equals("null"))
                                        _script += "add_line(gcs, '" + start_obj.Name + start_obj.Port2 + "', '" + end_obj.Name + end_obj.Port5 + "');" + "\n";
                                    if (!start_obj.Port3.Equals("null") && !end_obj.Port6.Equals("null"))
                                        _script += "add_line(gcs, '" + start_obj.Name + start_obj.Port3 + "', '" + end_obj.Name + end_obj.Port6 + "');" + "\n";
                                }
                                else if (current_connection.Equals(basic_node.SecondContName) && current_connection.Equals(_61850_object_name.FirstContName)) //Right-Left connection mode
                                {
                                    if (!start_obj.Port4.Equals("null") && !end_obj.Port1.Equals("null"))
                                        _script += "add_line(gcs, '" + start_obj.Name + start_obj.Port4 + "', '" + end_obj.Name + end_obj.Port1 + "');" + "\n";
                                    if (!start_obj.Port5.Equals("null") && !end_obj.Port2.Equals("null"))
                                        _script += "add_line(gcs, '" + start_obj.Name + start_obj.Port5 + "', '" + end_obj.Name + end_obj.Port2 + "');" + "\n";
                                    if (!start_obj.Port6.Equals("null") && !end_obj.Port3.Equals("null"))
                                        _script += "add_line(gcs, '" + start_obj.Name + start_obj.Port6 + "', '" + end_obj.Name + end_obj.Port3 + "');" + "\n";
                                }
                                else if (current_connection.Equals(basic_node.SecondContName) && current_connection.Equals(_61850_object_name.SecondContName)) //Right-Right connection mode
                                {
                                    if (!start_obj.Port4.Equals("null") && !end_obj.Port4.Equals("null"))
                                        _script += "add_line(gcs, '" + start_obj.Name + start_obj.Port4 + "', '" + end_obj.Name + end_obj.Port4 + "');" + "\n";
                                    if (!start_obj.Port5.Equals("null") && !end_obj.Port5.Equals("null"))
                                        _script += "add_line(gcs, '" + start_obj.Name + start_obj.Port5 + "', '" + end_obj.Name + end_obj.Port5 + "');" + "\n";
                                    if (!start_obj.Port6.Equals("null") && !end_obj.Port6.Equals("null"))
                                        _script += "add_line(gcs, '" + start_obj.Name + start_obj.Port6 + "', '" + end_obj.Name + end_obj.Port6 + "');" + "\n";
                                }
                            }
                        }
                    }
                    connection_list.Clear();
                }
            }

            return _script;
        }

        private string add_solver_in_MATLAB_script()
        {
            return @"% Set a couple of model parameters to eliminate warning messages
set_param(gcs,...
    'Solver','FixedStep',...
    'FixedStep','50e-6',...
	'StopTime', '30');
% Save the model
save_system(fname);";
        }

        private void build_the_treeview_structure_and_display(XmlNode scd_file_xml_structure, TreeNode root_node)
        {
            XmlNode child_node = null;
            XmlNodeList scd_file_list_of_nodes = null;
            
            if (scd_file_xml_structure.HasChildNodes)
            {
                scd_file_list_of_nodes = scd_file_xml_structure.ChildNodes;
                for (short i = 0; i < scd_file_list_of_nodes.Count; i++)
                {
                    child_node = scd_file_xml_structure.ChildNodes[i];
                    root_node.Nodes.Add(new TreeNode(build_node_from_specific_properties(child_node)));
                    this.build_the_treeview_structure_and_display(child_node, root_node.Nodes[i]);
                }
            }
            else
                root_node.Text = build_node_from_specific_properties(scd_file_xml_structure);
        }

        private string build_node_from_specific_properties(XmlNode node)
        {
            string result = String.Empty;

            result += node.Name;

            if (node.Attributes.GetNamedItem("id") != null)
                result += " id=\"" + node.Attributes.GetNamedItem("id").Value + "\"";
            if (node.Attributes.GetNamedItem("lnClass") != null)
                result += " lnClass=\"" + node.Attributes.GetNamedItem("lnClass").Value + "\"";
            if (node.Attributes.GetNamedItem("ldInst") != null)
                result += " ldInst=\"" + node.Attributes.GetNamedItem("ldInst").Value + "\"";
            if (node.Attributes.GetNamedItem("phase") != null)
                result += " phase=\"" + node.Attributes.GetNamedItem("phase").Value + "\"";
            if (node.Attributes.GetNamedItem("name") != null)
                result += " name=\"" + node.Attributes.GetNamedItem("name").Value + "\"";
            if (node.Attributes.GetNamedItem("substationName") != null)
                result += " substationName=\"" + node.Attributes.GetNamedItem("substationName").Value + "\"";
            if (node.Attributes.GetNamedItem("voltageLevelName") != null)
                result += " voltageLevelName=\"" + node.Attributes.GetNamedItem("voltageLevelName").Value + "\"";
            if (node.Attributes.GetNamedItem("connectivityNode") != null)
                result += " connectivityNode=\"" + node.Attributes.GetNamedItem("connectivityNode").Value + "\"";
            if (node.Attributes.GetNamedItem("lnType") != null)
                result += " lnType=\"" + node.Attributes.GetNamedItem("lnType").Value + "\"";
            if (node.Attributes.GetNamedItem("pathName") != null)
                result += " pathName=\"" + node.Attributes.GetNamedItem("pathName").Value + "\"";

            return result;
        }

        private List<IEC61850> get_IEC61850_objects_from_scd(XmlNode scd_file_xml_structure, List<IEC61850> IEC61850_objects)
        {
            XmlNode child_node = null;
            IEC61850 new_IEC61850 = new IEC61850("", "", "", "");

            if (scd_file_xml_structure.HasChildNodes)
            {
                for (short i = 0; i < scd_file_xml_structure.ChildNodes.Count; i++)
                {
                    child_node = scd_file_xml_structure.ChildNodes[i];
                    if (child_node.Name == "ConductingEquipment")
                    {
                        new_IEC61850.Type = child_node.Attributes.GetNamedItem("type").Value;
                        new_IEC61850.Name = child_node.Attributes.GetNamedItem("name").Value;
                        foreach (XmlNode sub_node in child_node.ChildNodes)
                        {
                            if (sub_node.Name == "Terminal")
                            {
                                new_IEC61850.Connection = sub_node.Attributes.GetNamedItem("connectivityNode").Value;
                                if (new_IEC61850.FirstContName.Length == 0)
                                    new_IEC61850.FirstContName = sub_node.Attributes.GetNamedItem("connectivityNode").Value;
                                else
                                    new_IEC61850.SecondContName = sub_node.Attributes.GetNamedItem("connectivityNode").Value;
                            }
                        }
                        IEC61850_objects.Add(new_IEC61850);
                        new_IEC61850 = new IEC61850("", "", "", "");
                    }
                    IEC61850_objects = get_IEC61850_objects_from_scd(child_node, IEC61850_objects);
                }
            }
            return IEC61850_objects;
        }

        private List<SIMULINK> get_SIMULINK_objects_from_scd(List<SIMULINK> SIMULINK_objects, XmlNode scd_file_xml_structure, XmlDocument IEC61850_to_SIMULINK_transformation_table)
        {
            XmlNode child_node = null;

            if (scd_file_xml_structure.HasChildNodes)
            {
                for (short i = 0; i < scd_file_xml_structure.ChildNodes.Count; i++)
                {
                    child_node = scd_file_xml_structure.ChildNodes[i];
                    if (child_node.Name == "ConductingEquipment")
                    {
                        SIMULINK_objects.Add(configurate_SIMULINK_object(child_node.Attributes.GetNamedItem("type").Value, child_node.Attributes.GetNamedItem("name").Value, IEC61850_to_SIMULINK_transformation_table));
                    }
                    SIMULINK_objects = get_SIMULINK_objects_from_scd(SIMULINK_objects, child_node, IEC61850_to_SIMULINK_transformation_table);
                }
            }

            return SIMULINK_objects;
        }

        private SIMULINK configurate_SIMULINK_object(string object_type, string name, XmlDocument IEC61850_to_SIMULINK_transformation_table)
        {
            SIMULINK new_SIMULINK_object = null;
            XmlNode NodeGen = IEC61850_to_SIMULINK_transformation_table.SelectSingleNode("configuration");

            foreach (XmlNode childNode in NodeGen.ChildNodes)
            {
                if (childNode.Attributes.GetNamedItem("name").Value == object_type)
                {
                    if (childNode.Attributes.GetNamedItem("ports").Value == "one side" && childNode.Attributes.GetNamedItem("Lside_cont_num").Value == "1" && childNode.Attributes.GetNamedItem("Rside_cont_num").Value == "0")         //////////
                        new_SIMULINK_object = new SIMULINK(childNode.Attributes.GetNamedItem("path").Value, name, "/LConn1", "/LConn1", "/LConn1", "/LConn1", "/LConn1", "/LConn1", true, true, 1, 0);                                //
                    else if (childNode.Attributes.GetNamedItem("ports").Value == "one side" && childNode.Attributes.GetNamedItem("Lside_cont_num").Value == "0" && childNode.Attributes.GetNamedItem("Rside_cont_num").Value == "2")    //
                        new_SIMULINK_object = new SIMULINK(childNode.Attributes.GetNamedItem("path").Value, name, "/LConn2", "null", "null", "null", "/LConn1", "null", true, true, 0, 2);                                            //
                    else if (childNode.Attributes.GetNamedItem("ports").Value == "two side" && childNode.Attributes.GetNamedItem("Lside_cont_num").Value == "2" && childNode.Attributes.GetNamedItem("Rside_cont_num").Value == "2")    //
                        new_SIMULINK_object = new SIMULINK(childNode.Attributes.GetNamedItem("path").Value, name, "/LConn1", "/LConn2", "null", "/RConn1", "/RConn2", "null", true, true, 2, 2);                                      //
                    else if (childNode.Attributes.GetNamedItem("ports").Value == "two side" && childNode.Attributes.GetNamedItem("Lside_cont_num").Value == "2" && childNode.Attributes.GetNamedItem("Rside_cont_num").Value == "3")    //
                        new_SIMULINK_object = new SIMULINK(childNode.Attributes.GetNamedItem("path").Value, name, "/LConn2", "/LConn1", "null", "/RConn1", "/RConn2", "/RConn3", true, true, 2, 3);                                   //
                    else if (childNode.Attributes.GetNamedItem("ports").Value == "two side" && childNode.Attributes.GetNamedItem("Lside_cont_num").Value == "3" && childNode.Attributes.GetNamedItem("Rside_cont_num").Value == "2")    //
                        new_SIMULINK_object = new SIMULINK(childNode.Attributes.GetNamedItem("path").Value, name, "/LConn1", "/LConn2", "/LConn3", "/RConn1", "/RConn2", "null", true, true, 3, 2);                                   //
                    else if (childNode.Attributes.GetNamedItem("ports").Value == "two side" && childNode.Attributes.GetNamedItem("Lside_cont_num").Value == "3" && childNode.Attributes.GetNamedItem("Rside_cont_num").Value == "3")    //
                        new_SIMULINK_object = new SIMULINK(childNode.Attributes.GetNamedItem("path").Value, name, "/LConn1", "/LConn2", "/LConn3", "/RConn1", "/RConn2", "/RConn3", true, true, 3, 3);                                ///////////
                }
            }
            return new_SIMULINK_object;
        }

        private void button2_Click(object sender, EventArgs e)
        {
            using (var fbd = new FolderBrowserDialog())
            {
                DialogResult result = fbd.ShowDialog();
                if (result == DialogResult.OK && !string.IsNullOrWhiteSpace(fbd.SelectedPath))
                {
                    if (File.Exists(fbd.SelectedPath.ToString()))
                        File.Delete(fbd.SelectedPath.ToString());
                    using (FileStream fs = File.Create(fbd.SelectedPath.ToString() + @"\autogenerated_matlab_script.m"))
                    {
                        byte[] info = new UTF8Encoding(true).GetBytes(richTextBox1.Text);
                        fs.Write(info, 0, info.Length);
                    }
                }
            }
        }

        private string generate_CENTRAL_MANAGEMENT_SYSTEM_script_from_IEC61850_objects(List<IEC61850> list_of_IEC61850_objects)
        {
            string script = String.Empty;

            script = OCPP_initialize_CENTRAL_MANAGEMENT_SYSTEM_script();
            script += OCPP_initialize_IEC61850_objects_in_CENTRAL_MANAGEMENT_SYSTEM_script(list_of_IEC61850_objects);

            return script;
        }

        private string OCPP_initialize_CENTRAL_MANAGEMENT_SYSTEM_script()
        {
            return
@"import asyncio
import logging
import websockets
import sys, select

from datetime import datetime
from ocpp.routing import on
from ocpp.v201 import call
from ocpp.v201 import ChargePoint as cp
from ocpp.v201 import call_result
from inputimeout import inputimeout, TimeoutOccurred

logging.basicConfig(level=logging.INFO)

class ChargePoint(cp):
    @on('BootNotification')
    async def on_boot_notification(self, charging_station, reason, **kwargs):
        return call_result.BootNotificationPayload(
            current_time=datetime.utcnow().isoformat(),
            interval=10,
            status='Accepted'
        )
        
    @on('Heartbeat')
    async def on_heartbeat_rquest(self):
        return call_result.HeartbeatPayload(
                current_time = datetime.utcnow().isoformat()
            )    

    async def get_variables(self, name):         
        request = call.GetVariablesPayload(
            get_variable_data=[
                {'component': {'name': name},
                'variable': {'name': 'switch_status'}}
                ]
            )
        response = await self.call(request)
        if response.get_variable_result[0].get('attribute_status') == 'Accepted':
            print ('Variable has been updated successfully!')
            return response.get_variable_result[0].get('attribute_value')
        else:
            print ('Failed to get variable value!')
            return 'NULL'
 
    async def set_variables(self, component_name, new_value):
        request = call.SetVariablesPayload(
            set_variable_data=[
                {'component': {'name': component_name},
                'variable': {'name': 'switch_state_changed'},
                'attribute_value': new_value}               
	        ]
        )    
        response = await self.call(request)
        if response.set_variable_result[0].get('attribute_status') == 'Accepted':
            print('Variable has been updated successfully!')
            return True
        else:
            print ('Failed to set variable value!')
            return False

async def on_connect(websocket, path):
    # For every new charge point that connects, create a ChargePoint
    # instance and start listening for messages.
    #
    try:
        requested_protocols = websocket.request_headers[
            'Sec-WebSocket-Protocol']
    except KeyError:
        logging.info('Client has not requested any Subprotocol. '
                 'Closing Connection')
    if websocket.subprotocol:
        logging.info('Protocols Matched: %s', websocket.subprotocol)
    else:
        # In the websockets lib if no subprotocols are supported by the
        # client and the server, it proceeds without a subprotocol,
        # so we have to manually close the connection.
        logging.warning('Protocols Mismatched | Expected Subprotocols: %s,'
                        ' but client supports  %s | Closing connection',
                        websocket.available_subprotocols,
                        requested_protocols)
        return await websocket.close()

    charge_point_id = path.strip('/')
    cp = ChargePoint(charge_point_id, websocket)

    await asyncio.gather(cp.start(), execute_cmd(cp))

async def main():
    server = await websockets.serve(
        on_connect,
        '127.0.0.1',
        8080,
        subprotocols=['ocpp2.0.1']
    )
    logging.info('WebSocket Server Started')
    await server.wait_closed()
    
async def execute_cmd(cp):
    while True:
        await asyncio.sleep(1)
        try:
            user_input = inputimeout(prompt='>>', timeout=20)
            is_exist = await execute_if_command_and_parameter_exist(cp, user_input)      
            if is_exist == '-1':
                print ('The command: '+user_input.split()[0]+' is not correct!')
            if is_exist == '-2':
                print ('The parametr: '+user_input.split()[1]+' is not correct!')  
        except TimeoutOccurred:
            pass
        
async def execute_if_command_and_parameter_exist(cp, user_input):
    list_of_words = user_input.split()
    
    if list_of_words[0] == 'read': 
        if list_of_words[1] in globals():
            new_value = await cp.get_variables(list_of_words[1]) 
            if new_value != 'NULL':
                globals()[list_of_words[1]] = int(new_value)        
                return '1'
        else:
            return '-2'
    elif list_of_words[0] == 'write':
        if list_of_words[1] in globals():
            if await cp.set_variables(list_of_words[1], list_of_words[2]) == True:
                globals()[list_of_words[1]] = int(list_of_words[2])            
            return '1'
        else:
            return '-2'
    else:
        return '-1'
    if list_of_words[0] == 'exit' or list_of_words[0] == 'quit':
        exit(0)" + "\n\n";
        }

        private string OCPP_initialize_IEC61850_objects_in_CENTRAL_MANAGEMENT_SYSTEM_script(List<IEC61850> list_of_IEC61850_objects)
        {
            string _script = String.Empty;

            foreach (IEC61850 IEC61850_object in list_of_IEC61850_objects)
            {
                if (IEC61850_object.Type == "CBR")
                {
                    _script += "_"+IEC61850_object.Name + " = 0\n";
                }
            }

            _script += "\n" + @"if __name__ == '__main__':
    asyncio.run(main())";
            return _script;
        }

        private void button3_Click(object sender, EventArgs e)
        {
            using (var fbd = new FolderBrowserDialog())
            {
                DialogResult result = fbd.ShowDialog();
                if (result == DialogResult.OK && !string.IsNullOrWhiteSpace(fbd.SelectedPath))
                {
                    if (File.Exists(fbd.SelectedPath.ToString()))
                        File.Delete(fbd.SelectedPath.ToString());
                    using (FileStream fs = File.Create(fbd.SelectedPath.ToString() + @"\autogenerated_cms_sript.py"))
                    {
                        byte[] info = new UTF8Encoding(true).GetBytes(richTextBox2.Text);
                        fs.Write(info, 0, info.Length);
                    }
                    using (FileStream fs = File.Create(fbd.SelectedPath.ToString() + @"\autogenerated_cp_sript.py"))
                    {
                        byte[] info = new UTF8Encoding(true).GetBytes(richTextBox3.Text);
                        fs.Write(info, 0, info.Length);
                    }
                }
            }
        }

        private string generate_CHARGE_POINT_script_from_IEC61850_objects(List<IEC61850> list_of_IEC61850_objects)
        {
            string script = String.Empty;

            script = OCPP_initialize_CHARGE_POINT_script();
            script += OCPP_initialize_IEC61850_objects_in_CHARGE_POINT_script(list_of_IEC61850_objects);

            return script;
        }

        private string OCPP_initialize_CHARGE_POINT_script()
        {
            return
@"import asyncio
import logging
import websockets
import matlab.engine
import os

from ocpp.routing import on
from ocpp.v201 import call
from ocpp.v201 import call_result
from ocpp.v201 import ChargePoint as cp

logging.basicConfig(level=logging.INFO)

class ChargePoint(cp):
    async def send_boot_notification(self):
        request = call.BootNotificationPayload(
               charging_station={
                   'model': 'Charging_Point_Model',
                   'vendor_name': 'Charging_point_Vendor'
               },
               reason='PowerUp'
        )
        response = await self.call(request)
        if response.status == 'Accepted':
            print('Connected to central system.')
            
    async def send_heartbeat_request(self):
        request = call.HeartbeatPayload()
        response = await self.call(request)       

    @on('GetVariables')
    async def on_get_variables(self, get_variable_data, **kwargs):
        component_name = get_variable_data[0].get('component').get('name')
        
        status, value = check_if_name_exist_and_get_value(component_name)
        
        if status == True:
            get_variable_data[0].update({'attribute_status': 'Accepted'})
            get_variable_data[0].update({'attribute_value': str(value)})
        else:
            get_variable_data[0].update({'attribute_status': 'Rejected'})
            get_variable_data[0].update({'attribute_value': 'null'})
        return call_result.GetVariablesPayload(
            get_variable_result = get_variable_data
        )
        
    @on('SetVariables')
    async def on_set_variables(self, set_variable_data, **kwargs):
        component_name = set_variable_data[0].get('component').get('name')
        new_value = set_variable_data[0].get('attribute_value')
        
        status = check_if_component_exist_and_set_value(component_name, new_value)
        
        if status == True:
            set_variable_data[0].update({'attribute_status': 'Accepted'})
        else:
            set_variable_data[0].update({'attribute_status': 'Rejected'})
        
        set_variable_data[0].pop('attribute_value')
        return call_result.SetVariablesPayload(
            set_variable_result = set_variable_data
        )

async def main():
    global eng
    print ('MATLAB is running. Wait...')
    eng = matlab.engine.start_matlab('-desktop')
    if eng is not None:
        print ('MATLAB is successfully opened!')
    else:
        print ('FAILED to open MATALB!')
    os.chdir(os.getcwd())
    eng.cd(os.getcwd())
    await asyncio.sleep(10)
    eng.load_system('autogenerated_model')

    async with websockets.connect(
        'ws://127.0.0.1:8080/CP_1',
        subprotocols =['ocpp2.0.1']
    ) as ws:
        cp = ChargePoint('CP_1', ws)
        await asyncio.gather(cp.start(), execute_cmd(cp))
        eng.set_param('autogenerated_model', 'SimulationCommand', 'stop', nargout = 0)
        eng.close_system('autogenerated_model', nargout = 0)

async def execute_cmd(cp):
    await cp.send_boot_notification()
    while True:
        await cp.send_heartbeat_request()
        await asyncio.sleep(20)

def check_if_name_exist_and_get_value(component_name):
    print(component_name)
    if component_name in globals():  
        return True, globals()[component_name]
    else:
        return False, 'NULL'

def check_if_component_exist_and_set_value(component_name, new_value):
    if component_name in globals():
        try:
            globals()[component_name] = int(new_value)
            eng.set_param('autogenerated_model/' + component_name, 'Value', new_value, nargout=0)
            return True
        except ValueError:
            print('the value: ' + new_value + ' of component ' + component_name + ' can not be converted to integer')
            return False
    else:
        return False

eng = 0" + "\n\n";
        }

        private string OCPP_initialize_IEC61850_objects_in_CHARGE_POINT_script(List<IEC61850> list_of_IEC61850_objects)
        {
            string _script = String.Empty;

            foreach (IEC61850 IEC61850_object in list_of_IEC61850_objects)
            {
                if (IEC61850_object.Type == "CBR")
                {
                    _script += "_"+IEC61850_object.Name + " = 0\n";
                }
            }

            _script += "\n" + @"if __name__ == '__main__':
    asyncio.run(main())";
            return _script;
        }
    }
}
