import asyncio
import logging
import websockets
import matlab.engine
import os

from ocpp.routing import on
from ocpp.v201 import call
from ocpp.v201 import call_result
from ocpp.v201 import ChargePoint as cp

logging.basicConfig(level=logging.INFO)

class ChargePoint(cp):
    async def send_boot_notification(self):
        request = call.BootNotificationPayload(
               charging_station={
                   'model': 'Charging_Point_Model',
                   'vendor_name': 'Charging_point_Vendor'
               },
               reason='PowerUp'
        )
        response = await self.call(request)
        if response.status == 'Accepted':
            print('Connected to central system.')
            
    async def send_heartbeat_request(self):
        request = call.HeartbeatPayload()
        response = await self.call(request)       

    @on('GetVariables')
    async def on_get_variables(self, get_variable_data, **kwargs):
        component_name = get_variable_data[0].get('component').get('name')
        
        status, value = check_if_name_exist_and_get_value(component_name)
        
        if status == True:
            get_variable_data[0].update({'attribute_status': 'Accepted'})
            get_variable_data[0].update({'attribute_value': str(value)})
        else:
            get_variable_data[0].update({'attribute_status': 'Rejected'})
            get_variable_data[0].update({'attribute_value': 'null'})
        return call_result.GetVariablesPayload(
            get_variable_result = get_variable_data
        )
        
    @on('SetVariables')
    async def on_set_variables(self, set_variable_data, **kwargs):
        component_name = set_variable_data[0].get('component').get('name')
        new_value = set_variable_data[0].get('attribute_value')
        
        status = check_if_component_exist_and_set_value(component_name, new_value)
        
        if status == True:
            set_variable_data[0].update({'attribute_status': 'Accepted'})
        else:
            set_variable_data[0].update({'attribute_status': 'Rejected'})
        
        set_variable_data[0].pop('attribute_value')
        return call_result.SetVariablesPayload(
            set_variable_result = set_variable_data
        )

async def main():
    global eng
    print ('MATLAB is running. Wait...')
    eng = matlab.engine.start_matlab('-desktop')
    if eng is not None:
        print ('MATLAB is successfully opened!')
    else:
        print ('FAILED to open MATALB!')
    os.chdir(os.getcwd())
    eng.cd(os.getcwd())
    await asyncio.sleep(10)
    eng.load_system('autogenerated_model')

    async with websockets.connect(
        'ws://127.0.0.1:8080/CP_1',
        subprotocols =['ocpp2.0.1']
    ) as ws:
        cp = ChargePoint('CP_1', ws)
        await asyncio.gather(cp.start(), execute_cmd(cp))
        eng.set_param('autogenerated_model', 'SimulationCommand', 'stop', nargout = 0)
        eng.close_system('autogenerated_model', nargout = 0)

async def execute_cmd(cp):
    await cp.send_boot_notification()
    while True:
        await cp.send_heartbeat_request()
        await asyncio.sleep(10)

def check_if_name_exist_and_get_value(component_name):
    print(component_name)
    if component_name in globals():  
        return True, globals()[component_name]
    else:
        return False, 'NULL'

def check_if_component_exist_and_set_value(component_name, new_value):
    if component_name in globals():
        try:
            globals()[component_name] = int(new_value)
            eng.set_param('autogenerated_model/' + component_name, 'Value', new_value, nargout=0)
            return True
        except ValueError:
            print('the value: ' + new_value + ' of component ' + component_name + ' can not be converted to integer')
            return False
    else:
        return False

eng = 0

_CB10 = 0
_CB11 = 0
_CB12 = 0

if __name__ == '__main__':
    asyncio.run(main())